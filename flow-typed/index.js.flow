/* @flow */
declare module '@gemcook/auth' {
  declare export function signUp(
    email: string,
    password: string,
    attributes?: {},
  ): Promise<void>;

  declare export function confirmSignUp(
    username: string,
    code: string,
  ): Promise<void>;

  declare export function signIn(
    username: string,
    password: string,
  ): Promise<void>;

  declare export function signOut(): Promise<void>;

  declare export function changePassword(
    oldPassword: string,
    newPassword: string,
  ): Promise<void>;

  declare export function forgotPassword(username: string): Promise<void>;

  declare export function confirmForgotPassword(
    username: string,
    code: string,
    newPassword: string,
  ): Promise<void>;

  declare export function checkSession(logging: boolean): Promise<void>;

  declare export function getIdToken(logging: boolean): Promise<void>;

  declare export function registeSNSUser(snsType: string): Promise<void>;

  declare export function signInSNS(): Promise<void>;
}

declare class Promise<+R> {
  constructor(
    callback: (
      resolve: (result: Promise<R> | R) => void,
      reject: (error: any) => void,
    ) => mixed,
  ): void;

  then(onFulfill: null | void, onReject: null | void): Promise<R>;
  then<U>(
    onFulfill: null | void,
    onReject: (error: any) => Promise<U> | U,
  ): Promise<R | U>;
  then<U>(
    onFulfill: (value: R) => Promise<U> | U,
    onReject: null | void | ((error: any) => Promise<U> | U),
  ): Promise<U>;

  catch(onReject: null | void): Promise<R>;
  catch<U>(onReject: (error: any) => Promise<U> | U): Promise<R | U>;

  finally(onFinally: () => mixed): Promise<R>;

  static resolve<T>(object: Promise<T> | T): Promise<T>;
  static reject<T>(error: any): Promise<T>;
  static all<T: Iterable<mixed>>(
    promises: T,
  ): Promise<$TupleMap<T, typeof $await>>;
  static race<T, Elem: Promise<T> | T>(promises: Iterable<Elem>): Promise<T>;
}

declare function $await<T>(p: Promise<T> | T): T;
